name: Initialize Building Environment
description: Initialize Building Environment
inputs:
  os:
    description: OS
    required: true
  qt-version:
    description: Qt version
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup devcmd
      if: inputs.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install build tools (Windows)
      if: inputs.os == 'windows-latest'
      shell: pwsh
      run: |
        if ((Get-Command "ninja.exe" -ErrorAction SilentlyContinue) -eq $null)
        {
           choco install ninja
        }
        where.exe ninja
        ninja --version
        Write-Output VCPKG_TRIPLET=x64-windows >> $env:GITHUB_ENV
        Write-Output QT_ARCH=win64_msvc2019_64 >> $env:GITHUB_ENV

    - name: Install build tools (Ubuntu)
      if: inputs.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        sudo apt update
        sudo apt-get -y install `
          ninja-build `
          libasound2-dev libatopology-dev  `
          libxrandr-dev libxinerama-dev libxrender-dev libxcomposite-dev libxcursor-dev `
          libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev
        Write-Output VCPKG_TRIPLET=x64-linux >> $env:GITHUB_ENV
        Write-Output QT_ARCH=gcc_64 >> $env:GITHUB_ENV

    - name: Install build tools (MacOS)
      if: inputs.os == 'macos-13'
      shell: pwsh
      env:
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
      run: |
        brew update
        brew install ninja
        Write-Output VCPKG_TRIPLET=x64-osx >> $env:GITHUB_ENV
        Write-Output QT_ARCH=clang_64 >> $env:GITHUB_ENV

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ inputs.qt-version }}
        archives: ${{ inputs.os == 'ubuntu-latest' && 'icu qtbase' || 'qtbase' }}
        cache: true

    - name: Prepare vcpkg
      shell: pwsh
      run: |
        Write-Output VCPKG_REPO_REF=$((Get-Content scripts/vcpkg-manifest/vcpkg.json | ConvertFrom-Json).'builtin-baseline') >> $env:GITHUB_ENV
        Write-Output VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_archives >> $env:GITHUB_ENV
        Write-Output VCPKG_CACHE_HASH=${{ hashFiles('scripts/vcpkg-manifest/vcpkg.json', 'scripts/vcpkg/**') }} >> $env:GITHUB_ENV

    - name: Restore vcpkg binary cache from cache
      id: cache_vcpkg
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_REPO_REF }}-${{ env.VCPKG_CACHE_HASH }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ env.VCPKG_REPO_REF }}-

    - name: Install vcpkg dependencies
      shell: pwsh
      run: |
        if (!(Test-Path $env:VCPKG_DEFAULT_BINARY_CACHE)) {
          New-Item $env:VCPKG_DEFAULT_BINARY_CACHE -ItemType directory
        }
        git clone https://github.com/microsoft/vcpkg.git
        Set-Location vcpkg
        ${{ runner.os == 'Windows' && './bootstrap-vcpkg.bat' || 'sh ./bootstrap-vcpkg.sh' }}
        git checkout $env:VCPKG_REPO_REF
        ./vcpkg install `
          --x-manifest-root=${{ github.workspace }}/scripts/vcpkg-manifest `
          --x-install-root=./installed `
          --triplet=${{ env.VCPKG_TRIPLET }}

    - name: Save vcpkg binary cache to cache
      if: steps.cache_vcpkg.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_REPO_REF }}-${{ env.VCPKG_CACHE_HASH }}

    - name: Get ASIO SDK
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/CrSjimo/diffscope-ci-tools-mirror/refs/heads/main/asiosdk_2.3.3_2019-06-14.zip" -OutFile $env:RUNNER_TEMP/asiosdk.zip
        Expand-Archive -Path $env:RUNNER_TEMP/asiosdk.zip -DestinationPath $env:GITHUB_WORKSPACE
        Rename-Item -Path asiosdk_2.3.3_2019-06-14 -NewName asiosdk

    - name: Set directory variables
      shell: pwsh
      run: |
        mv vcpkg ..
        Write-Output VCPKG_ROOT_DIR=$(Resolve-Path -Path ../vcpkg) >> $env:GITHUB_ENV

    - name: Set ASIO SDK directory variable (Windows)
      if: inputs.os == 'windows-latest'
      shell: pwsh
      run: |
        mv asiosdk ..
        Write-Output ASIOSDK_DIR=$(Resolve-Path -Path ../asiosdk) >> $env:GITHUB_ENV

    - name: Set ASIO SDK directory variable (Ubuntu & MacOS)
      if: inputs.os != 'windows-latest'
      shell: pwsh
      run: |
        Write-Output ASIOSDK_DIR= >> $env:GITHUB_ENV